package ui

import (
	"fmt"
	"httes/store"
	"image/color"
	"sort"
	"strings"
	"time"

	"fyne.io/fyne/v2"
	"fyne.io/fyne/v2/canvas"
	"fyne.io/fyne/v2/container"
	"fyne.io/fyne/v2/dialog"
	"fyne.io/fyne/v2/layout"
	"fyne.io/fyne/v2/storage"
	"fyne.io/fyne/v2/theme"
	"fyne.io/fyne/v2/widget"
)

func (mp *MainPage) createHomeScreen(
	onTestRun func(),
	onScenarios func(),
	onHistory func(),
) fyne.CanvasObject {
	var logoImg *canvas.Image
	if logo, err := fyne.LoadResourceFromPath("ui/logo.png"); err == nil {
		logoImg = canvas.NewImageFromResource(logo)
	} else {
		logoImg = canvas.NewImageFromResource(theme.FyneLogo())
	}
	logoImg.FillMode = canvas.ImageFillContain
	logoImg.SetMinSize(fyne.NewSize(300, 200))

	title := canvas.NewText("HTTES: –ú–æ–¥—É–ª—å –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", theme.PrimaryColor())
	title.TextStyle = fyne.TextStyle{Bold: true}
	title.TextSize = 24
	title.Alignment = fyne.TextAlignCenter

	separator := widget.NewSeparator()

	description := widget.NewLabel(
		"–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–µ–±-—Å–µ—Ä–≤–∏—Å–æ–≤ –∏ API.\n\n" +
			"‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã–º–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏\n" +
			"‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –Ω–∞–≥—Ä—É–∑–∫–∏\n" +
			"‚Ä¢ –î–µ—Ç–∞–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –∞–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n" +
			"‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤")
	description.Wrapping = fyne.TextWrapWord
	description.Alignment = fyne.TextAlignCenter

	testRunBtn := widget.NewButtonWithIcon("–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞", theme.MediaPlayIcon(), onTestRun)
	scenariosBtn := widget.NewButtonWithIcon("–°—Ü–µ–Ω–∞—Ä–∏–∏", theme.DocumentCreateIcon(), onScenarios)
	historyBtn := widget.NewButtonWithIcon("–ò—Å—Ç–æ—Ä–∏—è", theme.HistoryIcon(), onHistory)

	testRunBtn.Importance = widget.HighImportance
	scenariosBtn.Importance = widget.HighImportance
	historyBtn.Importance = widget.HighImportance

	// üîò –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º—ã
	var themeButton *widget.Button
	themeButton = widget.NewButton("‚òÄÔ∏è –°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞", func() {
		if mp.isDarkMode {
			fyne.CurrentApp().Settings().SetTheme(theme.LightTheme())
			themeButton.SetText("üåô –¢–µ–º–Ω–∞—è —Ç–µ–º–∞")
		} else {
			fyne.CurrentApp().Settings().SetTheme(theme.DarkTheme())
			themeButton.SetText("‚òÄÔ∏è –°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞")
		}
		mp.isDarkMode = !mp.isDarkMode
	})
	themeButton.Importance = widget.LowImportance

	content := container.NewVBox(
		container.NewPadded(logoImg),
		container.NewCenter(title),
		container.NewVBox(layout.NewSpacer(), separator, layout.NewSpacer()),
		container.NewVBox(layout.NewSpacer(), widget.NewLabel(" ")),
		container.NewPadded(description),
		container.NewVBox(layout.NewSpacer(), widget.NewLabel(" ")),
		container.NewGridWithColumns(3,
			container.NewPadded(testRunBtn),
			container.NewPadded(scenariosBtn),
			container.NewPadded(historyBtn),
		),
		container.NewVBox(layout.NewSpacer(), widget.NewLabel(" ")),
		container.NewCenter(themeButton), // üéØ –î–æ–±–∞–≤–ª–µ–Ω–æ: –∫–Ω–æ–ø–∫–∞ —Å–º–µ–Ω—ã —Ç–µ–º—ã
	)

	return container.NewPadded(
		container.NewVBox(
			container.NewCenter(content),
			layout.NewSpacer(),
		),
	)
}

func (mp *MainPage) createScenariosScreen(window fyne.Window, tabs *container.AppTabs) fyne.CanvasObject {
	// 1. –ú–æ–¥–µ–ª—å –¥–∞–Ω–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
	scenarios := []struct {
		Name        string
		CreatedAt   time.Time
		Description string
	}{
		{
			Name:        "API User Flow",
			CreatedAt:   time.Date(2023, 5, 15, 14, 30, 0, 0, time.UTC),
			Description: "–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ (CRUD)",
		},
		{
			Name:        "Auth Stress Test",
			CreatedAt:   time.Date(2023, 5, 20, 9, 15, 0, 0, time.UTC),
			Description: "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏",
		},
		{
			Name:        "Payment Validation",
			CreatedAt:   time.Date(2023, 6, 1, 16, 45, 0, 0, time.UTC),
			Description: "–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
		},
	}

	// 2. –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
	sortNewestFirst := true
	refreshList := func() {}

	// 3. –≠–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
	searchEntry := widget.NewEntry()
	searchEntry.PlaceHolder = "–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é..."

	// –ö–Ω–æ–ø–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
	sortBtn := widget.NewButtonWithIcon("–ù–æ–≤–µ–µ", theme.MenuDropDownIcon(), nil)
	sortMenu := fyne.NewMenu("",
		fyne.NewMenuItem("–ù–æ–≤–µ–µ", func() {
			sortNewestFirst = true
			sortBtn.SetText("–ù–æ–≤–µ–µ")
			refreshList()
		}),
		fyne.NewMenuItem("–°—Ç–∞—Ä–µ–µ", func() {
			sortNewestFirst = false
			sortBtn.SetText("–°—Ç–∞—Ä–µ–µ")
			refreshList()
		}),
	)

	sortBtn.OnTapped = func() {
		popUp := widget.NewPopUpMenu(sortMenu, window.Canvas())
		pos := fyne.CurrentApp().Driver().AbsolutePositionForObject(sortBtn)
		popUp.ShowAtPosition(pos.Add(fyne.NewPos(0, sortBtn.Size().Height)))
	}

	// –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
	newScenarioBtn := widget.NewButtonWithIcon("–ù–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π", theme.ContentAddIcon(), func() {
		scenarioWindow := mp.app.NewWindow("–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π")
		scenarioWindow.SetContent(mp.createScenarioEditorContent(scenarioWindow))
		scenarioWindow.Resize(fyne.NewSize(800, 600))
		scenarioWindow.Show()
	})

	// 4. –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
	list := widget.NewList(
		func() int { return len(scenarios) },
		func() fyne.CanvasObject {
			return container.NewBorder(
				nil,
				nil,
				nil,
				container.NewHBox(
					widget.NewButtonWithIcon("", theme.MediaPlayIcon(), nil),
					widget.NewButtonWithIcon("", theme.DocumentCreateIcon(), nil),
					widget.NewButtonWithIcon("", theme.DeleteIcon(), nil),
				),
				container.NewVBox(
					widget.NewLabel("Template"),
					widget.NewLabel(""),
				),
			)
		},
		func(id widget.ListItemID, item fyne.CanvasObject) {
			// –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–¥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
			if sortNewestFirst {
				sort.Slice(scenarios, func(i, j int) bool {
					return scenarios[i].CreatedAt.After(scenarios[j].CreatedAt)
				})
			} else {
				sort.Slice(scenarios, func(i, j int) bool {
					return scenarios[i].CreatedAt.Before(scenarios[j].CreatedAt)
				})
			}

			scenario := scenarios[id]
			container := item.(*fyne.Container)

			// –ó–∞–ø–æ–ª–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ü–µ–Ω–∞—Ä–∏–∏
			infoContainer := container.Objects[0].(*fyne.Container)
			infoContainer.Objects[0].(*widget.Label).SetText(scenario.Name)
			infoContainer.Objects[1].(*widget.Label).SetText(
				fmt.Sprintf("–°–æ–∑–¥–∞–Ω: %s | %s",
					scenario.CreatedAt.Format("02.01.2006 15:04"),
					scenario.Description),
			)

			// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
			buttons := container.Objects[1].(*fyne.Container)
			// –ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
			buttons.Objects[1].(*widget.Button).OnTapped = func() {
				tabs.SelectIndex(3)
			}

			// –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
			buttons.Objects[2].(*widget.Button).OnTapped = func() {
				dialog.ShowConfirm("–£–¥–∞–ª–µ–Ω–∏–µ", fmt.Sprintf("–£–¥–∞–ª–∏—Ç—å '%s'?", scenario.Name),
					func(ok bool) {
						if ok {
							// –õ–æ–≥–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
						}
					}, window)
			}
		},
	)

	// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞
	refreshList = func() {
		list.Refresh()
	}

	// 5. –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
	header := container.NewHBox(
		widget.NewButtonWithIcon("–ù–∞–∑–∞–¥", theme.NavigateBackIcon(), func() {
			tabs.SelectIndex(1)
		}),
		widget.NewLabelWithStyle("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ü–µ–Ω–∞—Ä–∏–π", fyne.TextAlignLeading, fyne.TextStyle{Bold: true}),
		layout.NewSpacer(),
		widget.NewLabel(fmt.Sprintf("–í—Å–µ–≥–æ: %d", len(scenarios))),
	)

	searchPanel := container.NewBorder(
		nil,
		nil,
		nil,
		container.NewHBox(
			sortBtn,
			newScenarioBtn,
		),
		searchEntry,
	)

	content := container.NewBorder(
		container.NewVBox(
			header,
			widget.NewSeparator(),
			searchPanel,
		),
		nil,
		nil,
		nil,
		list,
	)

	return container.NewPadded(
		container.NewGridWrap(
			fyne.NewSize(970, 600),
			content,
		),
	)
}

func (mp *MainPage) createTestRunScreen(window fyne.Window, tabs *container.AppTabs) fyne.CanvasObject {
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
	if mp.progressBar == nil {
		mp.progressBar = widget.NewProgressBar()
		mp.progressBar.Min = 0.0
		mp.progressBar.Max = 100.0
	}
	if mp.progressText == nil {
		mp.progressText = widget.NewLabel("Request Avg Duration 0.000s")
	}
	if mp.resultOutput == nil {
		mp.resultOutput = widget.NewTextGrid()
	}

	ui := NewLoadTestUI(mp.app, window)
	ui.resultOutput = mp.resultOutput
	ui.progressBar = mp.progressBar
	ui.progressText = mp.progressText

	// –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
	controls := container.NewVBox(
		widget.NewSeparator(),
		createURLSection(),
		createParamsSection(),
		container.NewHBox(createProxySection(), createCertFields(window)),
		mp.createScenariosSection(tabs),
		widget.NewSeparator(),
		ui.CreateButtons(),
		widget.NewSeparator(),
		container.NewHBox(
			container.NewGridWrap(fyne.NewSize(400, 30), ui.progressBar),
			ui.progressText,
		),
	)

	// –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
	results := container.NewVScroll(ui.resultOutput)
	results.SetMinSize(fyne.NewSize(300, 150))

	// –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–æ–π –∏—Å—Ç–æ—Ä–∏–∏
	resultHeader := container.NewBorder(
		nil,
		nil,
		widget.NewLabel("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞"), // –¢–µ–∫—Å—Ç —Å–ª–µ–≤–∞
		widget.NewButtonWithIcon("–ò—Å—Ç–æ—Ä–∏—è —Ç–µ—Å—Ç–æ–≤", theme.HistoryIcon(), func() {
			tabs.SelectTabIndex(3) // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞—è, —á—Ç–æ –≤–∫–ª–∞–¥–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∏–º–µ–µ—Ç –∏–Ω–¥–µ–∫—Å 2
		}),
		nil,
	)

	resultsBox := container.NewVBox(
		resultHeader,
		results,
	)

	left := container.NewVBox(container.NewVBox(
		controls,
		widget.NewSeparator(),
		resultsBox,
	))

	right := container.NewVBox(
		container.NewVBox(
			widget.NewLabelWithStyle("–ú–µ—Ç—Ä–∏–∫–∏ —Ç–µ—Å—Ç–∞", fyne.TextAlignLeading, fyne.TextStyle{Bold: true}),
			widget.NewSeparator(),
			CreateLoadTestCharts(),
		),
	)

	layout := container.NewHBox(
		left,
		widget.NewSeparator(),
		right,
	)

	return layout
}

func (mp *MainPage) createScenariosSection(tabs *container.AppTabs) fyne.CanvasObject {
	// –°–æ–∑–¥–∞–µ–º –º–µ—Ç–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
	scenarioLabel := widget.NewLabel("–°—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ –≤—ã–±—Ä–∞–Ω")
	scenarioLabel.Wrapping = fyne.TextTruncate

	// –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è
	selectBtn := widget.NewButtonWithIcon("–í—ã–±—Ä–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π", theme.NavigateNextIcon(), func() {
		tabs.SelectIndex(2)
	})

	// "API" —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∏ (–ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç–æ –∏ —Å–∏–Ω–∏–º —Ü–≤–µ—Ç–æ–º)
	apiText := widget.NewHyperlink("API", nil)

	return container.NewHBox(
		selectBtn,
		apiText,
		scenarioLabel,
	)
}

// func (mp *MainPage) createLoadProfilesScreen(window fyne.Window) fyne.CanvasObject {
// 	// –°–ø–∏—Å–æ–∫ –ø—Ä–æ—Ñ–∏–ª–µ–π
// 	list := widget.NewList(
// 		func() int { return store.LoadProfileCount() },
// 		func() fyne.CanvasObject {
// 			return container.NewHBox(
// 				widget.NewLabel("Template"),
// 				widget.NewButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", nil),
// 			)
// 		},
// 		func(id widget.ListItemID, item fyne.CanvasObject) {
// 			profile := store.GetLoadProfile(id)
// 			container := item.(*fyne.Container)
// 			container.Objects[0].(*widget.Label).SetText(profile.Name)
// 			container.Objects[1].(*widget.Button).OnTapped = func() {
// 				dialog.ShowInformation("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
// 					fmt.Sprintf("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è %s", profile.Name),
// 					window)
// 			}
// 		},
// 	)

// 	// –§–æ—Ä–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
// 	nameEntry := widget.NewEntry()
// 	nameEntry.PlaceHolder = "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è"

// 	typeSelect := widget.NewSelect([]string{"Constant", "Incremental"}, nil)
// 	typeSelect.PlaceHolder = "–¢–∏–ø –ø—Ä–æ—Ñ–∏–ª—è"

// 	configEntry := widget.NewMultiLineEntry()
// 	configEntry.PlaceHolder = "JSON –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"
// 	configEntry.SetMinRowsVisible(3)

// 	saveBtn := widget.NewButtonWithIcon("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", theme.DocumentSaveIcon(), func() {
// 		if nameEntry.Text == "" {
// 			dialog.ShowInformation("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è", window)
// 			return
// 		}

// 		store.AddLoadProfile(store.LoadProfile{
// 			ID:   store.LoadProfileCount() + 1,
// 			Name: nameEntry.Text,
// 			Type: typeSelect.Selected,
// 		})
// 		dialog.ShowInformation("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ", "–ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω", window)

// 		// –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã
// 		nameEntry.SetText("")
// 		typeSelect.ClearSelected()
// 		configEntry.SetText("")
// 	})

// 	// –û—Å–Ω–æ–≤–Ω–æ–π layout
// 	return container.NewPadded(
// 		container.NewVBox(
// 			container.NewVScroll(list),
// 			widget.NewSeparator(),
// 			widget.NewLabel("–ù–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å:"),
// 			nameEntry,
// 			typeSelect,
// 			configEntry,
// 			container.NewCenter(saveBtn),
// 		),
// 	)
// }

func (mp *MainPage) createScenarioEditorContent(window fyne.Window) fyne.CanvasObject {
	// –ü–æ–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è
	nameEntry := widget.NewEntry()
	nameEntry.SetPlaceHolder("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ /users")
	nameEntry.SetText("")

	descEntry := widget.NewEntry()
	descEntry.SetPlaceHolder("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã GET, POST, PUT, DELETE, PATCH")
	descEntry.SetText("")

	profileSelect := widget.NewSelect([]string{"Linear", "incremental", "Waved"}, nil)
	profileSelect.SetSelected("Linear")

	jsonEditor := widget.NewMultiLineEntry()
	jsonEditor.SetPlaceHolder(`–ù–∞–ø—Ä–∏–º–µ—Ä: {
  "steps": [
    {
      "name": "Create user",
      "request": {
        "method": "POST",
        "url": "/users"
      }
    }
  ]
}`)
	jsonEditor.SetMinRowsVisible(6)

	// –°–ø–∏—Å–æ–∫ –∫–æ–Ω–µ—á–Ω—ã—Ö —Ç–æ—á–µ–∫
	var endpoints []store.Endpoint

	endpointURL := widget.NewEntry()
	endpointURL.SetPlaceHolder(`https://api.example.com/users`)
	endpointURL.SetMinRowsVisible(3)

	endpointHeaders := widget.NewMultiLineEntry()
	endpointHeaders.SetPlaceHolder(`–ù–∞–ø—Ä–∏–º–µ—Ä: {
  "Content-Type": "application/json",
  "Authorization": "Bearer token"
}`)
	endpointHeaders.SetMinRowsVisible(3)

	// –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã
	certPath := widget.NewEntry()
	certPath.SetPlaceHolder("–ü—É—Ç—å –∫ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: /path/to/cert.pem)")
	certPath.Disable()

	certKeyPath := widget.NewEntry()
	certKeyPath.SetPlaceHolder("–ü—É—Ç—å –∫ –∫–ª—é—á—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: /path/to/key.pem)")
	certKeyPath.Disable()

	certLabel := widget.NewLabel("–ù–µ –≤—ã–±—Ä–∞–Ω–æ")
	keyLabel := widget.NewLabel("–ù–µ –≤—ã–±—Ä–∞–Ω–æ")

	var selectedCert *store.Cert

	// –§–∏–ª—å—Ç—Ä—ã —Ñ–∞–π–ª–æ–≤
	certFilter := storage.NewExtensionFileFilter([]string{".crt", ".pem"})
	keyFilter := storage.NewExtensionFileFilter([]string{".key"})

	// –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
	selectCertBtn := widget.NewButton("–í—ã–±—Ä–∞—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç", func() {
		fileDialog := dialog.NewFileOpen(func(reader fyne.URIReadCloser, err error) {
			if err == nil && reader != nil {
				certPath.SetText(reader.URI().Path())
				certLabel.SetText(reader.URI().Name())
				reader.Close()
			}
		}, window)
		fileDialog.SetFilter(certFilter)
		fileDialog.Show()
	})

	// –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–ª—é—á–∞
	selectKeyBtn := widget.NewButton("–í—ã–±—Ä–∞—Ç—å –∫–ª—é—á", func() {
		fileDialog := dialog.NewFileOpen(func(reader fyne.URIReadCloser, err error) {
			if err == nil && reader != nil {
				certKeyPath.SetText(reader.URI().Path())
				keyLabel.SetText(reader.URI().Name())
				reader.Close()
			}
		}, window)
		fileDialog.SetFilter(keyFilter)
		fileDialog.Show()
	})

	// –ö–Ω–æ–ø–∫–∞ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"
	saveBtn := widget.NewButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π", func() {
		if strings.TrimSpace(nameEntry.Text) == "" {
			dialog.NewInformation("–û—à–∏–±–∫–∞", "–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ", window).Show()
			return
		}

		// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–µ—á–Ω–æ–π —Ç–æ—á–∫–∏, –µ—Å–ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –ø–æ–ª—è
		if endpointURL.Text != "" {
			endpoints = append(endpoints, store.Endpoint{
				URL:     strings.TrimSpace(endpointURL.Text),
				Headers: endpointHeaders.Text,
			})
		}

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
		if certPath.Text != "" && certKeyPath.Text != "" {
			selectedCert = &store.Cert{
				Name: certLabel.Text,
				Path: certPath.Text,
				Key:  certKeyPath.Text,
			}
		}

		store.AddScenario(store.Scenario{
			ID:          store.ScenarioCount() + 1,
			Name:        nameEntry.Text,
			Description: descEntry.Text,
			Cert:        selectedCert,
		})

		dialog.NewInformation("–°—Ü–µ–Ω–∞—Ä–∏–π", "–°—Ü–µ–Ω–∞—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω—ë–Ω", window).Show()

		// –û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º—ã
		nameEntry.SetText("")
		descEntry.SetText("")
		jsonEditor.SetText("")
		endpointURL.SetText("")
		endpointHeaders.SetText("")
		certPath.SetText("")
		certKeyPath.SetText("")
		certLabel.SetText("–ù–µ –≤—ã–±—Ä–∞–Ω–æ")
		keyLabel.SetText("–ù–µ –≤—ã–±—Ä–∞–Ω–æ")
	})
	// –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞
	leftPanel := container.NewVBox(
		widget.NewLabelWithStyle("–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è", fyne.TextAlignLeading, fyne.TextStyle{Bold: true}),
		widget.NewLabel("–ù–∞–∑–≤–∞–Ω–∏–µ:"),
		nameEntry,
		widget.NewLabel("–û–ø–∏—Å–∞–Ω–∏–µ:"),
		descEntry,
		widget.NewLabel("–ü—Ä–æ—Ñ–∏–ª—å –Ω–∞–≥—Ä—É–∑–∫–∏:"),
		profileSelect,
		widget.NewLabelWithStyle("JSON —Å—Ü–µ–Ω–∞—Ä–∏—è:", fyne.TextAlignLeading, fyne.TextStyle{Bold: true}),
		jsonEditor,
	)

	// –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞
	rightPanel := container.NewVBox(
		widget.NewLabelWithStyle("–ö–æ–Ω–µ—á–Ω—ã–µ —Ç–æ—á–∫–∏", fyne.TextAlignLeading, fyne.TextStyle{Bold: true}),
		widget.NewLabel("URL:"),
		endpointURL,
		widget.NewLabel("–ó–∞–≥–æ–ª–æ–≤–∫–∏ (JSON):"),
		endpointHeaders,
		widget.NewLabelWithStyle("–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã", fyne.TextAlignLeading, fyne.TextStyle{Bold: true}),
		container.NewHBox(selectCertBtn, certLabel),
		container.NewHBox(selectKeyBtn, keyLabel),
	)

	// –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä 2 –∫–æ–ª–æ–Ω–∫–∏
	content := container.NewGridWithColumns(2, leftPanel, rightPanel)

	// –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–æ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
	mainContent := container.NewVBox(
		content,
		widget.NewSeparator(),
		container.NewCenter(saveBtn),
	)

	// –û–±—ë—Ä—Ç–∫–∞ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º
	return container.NewCenter(container.NewGridWrap(fyne.NewSize(970, 550), mainContent))
}

func (mp *MainPage) createHistoryScreen(window fyne.Window, tabs *container.AppTabs) fyne.CanvasObject {
	// 1. –ú–æ–¥–µ–ª—å –¥–∞–Ω–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏–∏ —Ç–µ—Å—Ç–æ–≤
	type TestHistory struct {
		ID          string
		Name        string
		CreatedAt   time.Time
		Status      string // "success", "failed", "running"
		Description string
		APIDetails  string
		Request     string
		Response    string
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ç–µ—Å—Ç–æ–≤ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏
	history := []TestHistory{
		{
			ID:          "1",
			Name:        "API User Flow Test",
			CreatedAt:   time.Now().Add(-time.Hour * 2),
			Status:      "success",
			Description: "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CRUD –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
			APIDetails:  "POST /users, GET /users/{id}, PUT /users/{id}, DELETE /users/{id}",
			Request:     "POST /users {\"name\":\"test\",\"email\":\"test@example.com\"}",
			Response:    "201 Created {\"id\":123,\"name\":\"test\",\"email\":\"test@example.com\"}",
		},
		{
			ID:          "2",
			Name:        "Auth Stress Test",
			CreatedAt:   time.Now().Add(-time.Hour * 5),
			Status:      "failed",
			Description: "–ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏",
			APIDetails:  "POST /auth/login 100 –∑–∞–ø—Ä–æ—Å–æ–≤/—Å–µ–∫",
			Request:     "POST /auth/login {\"username\":\"test\",\"password\":\"test123\"}",
			Response:    "429 Too Many Requests",
		},
		{
			ID:          "3",
			Name:        "Payment Validation",
			CreatedAt:   time.Now().Add(-time.Hour * 24),
			Status:      "success",
			Description: "–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
			APIDetails:  "POST /payments —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –≤—Ö–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏",
			Request:     "POST /payments {\"card\":\"4111111111111111\",\"expiry\":\"12/25\",\"cvv\":\"123\"}",
			Response:    "200 OK {\"status\":\"processed\"}",
		},
	}

	// 2. –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π —Ç–µ—Å—Ç–∞
	showTestDetails := func(test TestHistory) {
		detailWindow := mp.app.NewWindow("–î–µ—Ç–∞–ª–∏ —Ç–µ—Å—Ç–∞: " + test.Name)
		detailWindow.Resize(fyne.NewSize(800, 600))

		// –°–æ–∑–¥–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ–∫–Ω–∞ —Å –¥–µ—Ç–∞–ª—è–º–∏
		nameLabel := widget.NewLabelWithStyle(test.Name, fyne.TextAlignLeading, fyne.TextStyle{Bold: true})

		// –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–æ–∑–¥–∞–Ω–∏—è —Ü–≤–µ—Ç–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
		statusText := canvas.NewText("–°—Ç–∞—Ç—É—Å: "+test.Status, nil)
		if test.Status == "success" {
			statusText.Color = color.NRGBA{R: 0, G: 180, B: 0, A: 255}
		} else if test.Status == "failed" {
			statusText.Color = color.NRGBA{R: 180, G: 0, B: 0, A: 255}
		}
		statusText.TextStyle.Bold = true

		timeLabel := widget.NewLabel("–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: " + test.CreatedAt.Format("02.01.2006 15:04:05"))
		descLabel := widget.NewLabel(test.Description)
		descLabel.Wrapping = fyne.TextWrapWord

		apiLabel := widget.NewLabelWithStyle("API –¥–µ—Ç–∞–ª–∏:", fyne.TextAlignLeading, fyne.TextStyle{Bold: true})
		apiDetails := widget.NewLabel(test.APIDetails)
		apiDetails.Wrapping = fyne.TextWrapWord

		requestLabel := widget.NewLabelWithStyle("–ó–∞–ø—Ä–æ—Å:", fyne.TextAlignLeading, fyne.TextStyle{Bold: true})
		requestText := widget.NewLabel(test.Request)
		requestText.Wrapping = fyne.TextWrapWord

		responseLabel := widget.NewLabelWithStyle("–û—Ç–≤–µ—Ç:", fyne.TextAlignLeading, fyne.TextStyle{Bold: true})
		responseText := widget.NewLabel(test.Response)
		responseText.Wrapping = fyne.TextWrapWord

		content := container.NewVScroll(container.NewVBox(
			nameLabel,
			container.NewHBox(widget.NewLabel("–°—Ç–∞—Ç—É—Å: "), statusText),
			timeLabel,
			widget.NewSeparator(),
			descLabel,
			widget.NewSeparator(),
			apiLabel,
			apiDetails,
			widget.NewSeparator(),
			requestLabel,
			requestText,
			widget.NewSeparator(),
			responseLabel,
			responseText,
		))

		detailWindow.SetContent(content)
		detailWindow.Show()
	}

	// 3. –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—Ä–∏–∏ —Ç–µ—Å—Ç–æ–≤
	list := widget.NewList(
		func() int { return len(history) },
		func() fyne.CanvasObject {
			return container.NewBorder(
				nil,
				nil,
				nil,
				container.NewHBox(), // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ü–≤–µ—Ç–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
				container.NewVBox(
					widget.NewLabel("–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞"),
					widget.NewLabel("–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"),
				),
			)
		},
		func(id widget.ListItemID, item fyne.CanvasObject) {
			test := history[id]
			container := item.(*fyne.Container)

			// –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
			infoContainer := container.Objects[0].(*fyne.Container)
			infoContainer.Objects[0].(*widget.Label).SetText(test.Name)
			infoContainer.Objects[1].(*widget.Label).SetText(test.CreatedAt.Format("02.01.2006 15:04:05"))

			// –°–æ–∑–¥–∞–µ–º —Ü–≤–µ—Ç–Ω–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
			statusText := canvas.NewText(test.Status, nil)
			if test.Status == "success" {
				statusText.Color = color.NRGBA{R: 0, G: 180, B: 0, A: 255}
			} else if test.Status == "failed" {
				statusText.Color = color.NRGBA{R: 180, G: 0, B: 0, A: 255}
			}
			statusText.TextStyle.Bold = true

			// –û—á–∏—â–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
			statusContainer := container.Objects[1].(*fyne.Container)
			statusContainer.Objects = []fyne.CanvasObject{statusText}
		},
	)

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞
	list.OnSelected = func(id widget.ListItemID) {
		showTestDetails(history[id])
		list.Unselect(id) // –°–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
	}

	// 4. –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏
	clearHistoryBtn := widget.NewButtonWithIcon("–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", theme.DeleteIcon(), func() {
		dialog.ShowConfirm("–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏", "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é —Ç–µ—Å—Ç–æ–≤?", func(ok bool) {
			if ok {
				// –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
				history = []TestHistory{}
				list.Refresh()
			}
		}, window)
	})

	// 5. –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
	header := container.NewHBox(
		widget.NewButtonWithIcon("–ù–∞–∑–∞–¥", theme.NavigateBackIcon(), func() {
			tabs.SelectIndex(1)
		}),
		widget.NewLabelWithStyle("–ò—Å—Ç–æ—Ä–∏—è —Ç–µ—Å—Ç–æ–≤", fyne.TextAlignLeading, fyne.TextStyle{Bold: true}),
		layout.NewSpacer(),
		widget.NewLabel(fmt.Sprintf("–í—Å–µ–≥–æ: %d", len(history))),
	)

	content := container.NewBorder(
		container.NewVBox(
			header,
			widget.NewSeparator(),
			container.NewHBox(
				layout.NewSpacer(),
				clearHistoryBtn,
			),
		),
		nil,
		nil,
		nil,
		list,
	)

	return container.NewPadded(
		container.NewGridWrap(
			fyne.NewSize(970, 600),
			content,
		),
	)
}
